generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  username String @unique 
  email String @unique
  password String 

  verifiedMail Boolean @default(false)

  refreshToken RefreshToken[]


  tutor Tutor?
  isTutor Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Tutor {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id])
  userId String @unique

  description String @db.VarChar(500)
  tagline String @db.VarChar(50)
  introVideoLink String

  teachingExperience TeachingExperience[]
  educationQualification EducationQualification[]

  refreshToken RefreshToken[]


  verifiedMail Boolean @default(false)
  verifiedTeacher Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("tutors")
}

model EducationQualification {
  id String @id @default(cuid())


  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId String 

  institutionName String
  endDate DateTime @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("educationQualifications")
}

model TeachingExperience {
  id String @id @default(cuid())
  
  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId String 

  institutionName String
  startDate DateTime @db.Date
  endDate DateTime @db.Date


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("teachingExperiences")
}

model RefreshToken {
    id String @id @default(cuid())


  token String @unique

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  tutorId String?
  tutor Tutor? @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}